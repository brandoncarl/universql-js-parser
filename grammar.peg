// Universql Grammar v0.3.0

Query
  = (FindQuery / InsertQuery / UpdateQuery / DeleteQuery)

FindQuery
  = tables:Tables _? map:Map? _? options:Options? _? filters:Filters? {
    return {
      type: "find",
      filters: filters,
      map: map,
      options: options,
      tables: tables
    }
  }

InsertQuery
  = "+" _? tables:Tables _? object:object {
    return {
      type: "insert",
      object: object,
      tables: tables
    }
  }

UpdateQuery
  = "^" _? tables:Tables _? object:object _? filters:Filters? {
    return {
      type: "update",
      filters: filters,
      object: object,
      tables: tables
    }
  }

DeleteQuery
  = "-" _? tables:Tables _? filters:Filters? _? "!" {
    return {
      type: "delete",
      filters: filters,
      tables: tables
    }
  }

Tables
  = Table+

// Make sure we comply with spec here
Table
  = [a-zA-Z_@#][0-9a-zA-Z_@#$]* { return text(); }

Map
  = "{" fields:Field+ "}" {
    var map = {};
    fields.forEach(function(field) {
      map[field.input] = field.output;
    });
    return map;
  }

// Make sure we comply with spec here
Field
  = field:Assignment ("," " "*)?  { return field; }

Options
  = "[" options:Option+ "]" { return options; }

Option
  = SortModifier / LimitModifier / SkipModifier

SortModifier
  = "sort" " "? "=" " "? sorts:Sort+ {
    return {
      type: "sort",
      value: sorts
    }
  }

Sort
  = order:("+" / "-" / "") name:Name (" "*)? {
    return {
      key: name,
      order: ("-" === order) ? "desc" : "asc"
    }
  }

LimitModifier
  = "limit" " "? "=" " "? count:PositiveInteger {
    return {
      type: "limit",
      value: count
    }
  }

SkipModifier
  = "skip" " "? "=" " "? count:PositiveInteger {
    return {
      type: "skip",
      value: count
    }
  }

Filters
  = _? "?" _? filters:OrTerm+ {
 	return filters;
  }



/**

  Expressions

**/

OrTerm
  = head:AndTerm tail:(_? OrOperator _? AndTerm)* {
    if (tail.length) {
      return { operator : "|", operands: [head].concat(tail.map(function(x) { return x[1]; })) };
    } else {
      return head;
    }
  }

AndTerm
  = head:Term tail:(_? AndOperator _? Term)* {
    if (tail.length) {
      return { operator : "&", operands: [head].concat(tail.map(function(x) { return x[1]; })) };
    } else {
      return head;
    }
  }

Term
  = "(" term:OrTerm ")" { return term }
  / Statement

Statement
  = subject:Subject _? predicate:Predicate {
    return {
      key: subject.name,
      index: subject.index,
      comparator: predicate.comparator,
      value: predicate.value
    }
  }

Subject
  = name:Name index:Index? {
    return {
      name: name,
      index: index || null
    }
  }

Index
  = "[" position:("*" / PositiveInteger) "]" {
    return position;
  }

Predicate
  = comparator:Comparator _? value:Value {
    return {
      comparator: comparator,
      value: value
    }
  }

Comparator
  = ("=" / "<=" / "<" / ">=" / ">" / "!=" / "?=" / "?") { return text(); }

Value
  = ArrayValue / ListValue / RegexValue / LiteralValue

ArrayValue
  = "[" head:LiteralValue tail:("," " "? LiteralValue)* "]" {
    if (tail.length) {
      return { type: "array", value: [head].concat(tail.map(function(x) { return x[2]; })) };
    } else {
      return { type: "array", value: head };
    }
  }

ListValue
  = "{" head:LiteralValue tail:("," " "? LiteralValue)* "}" {
    if (tail.length) {
      return { type: "list", value: [head].concat(tail.map(function(x) { return x[2]; })) };
    } else {
      return { type: "list", value: head };
    }
  }

Assignment
 = text:StringValue {
   return {
     input: text.value,
     output: text.value
   }
 }

LiteralValue
  = BooleanValue / NumberValue / StringValue

RegexValue
  = regex:Regex flags:([gim]*) {
    return {
      type: "regex",
      value: regex + flags.join("")
    }
  }

BooleanValue
  = ("true" / "false") {
    return {
      type: "literal",
      value: text() !== "false"
    }
  }

NumberValue
  = number:Number {
    return {
      type: "literal",
      value: number
    }
  }

StringValue
  = value:(string / UnquotedString) {
    return {
      type: "literal",
      value: value
    }
  }

AndOperator
  = "&"

OrOperator
  = "|"


/**

  Primitives
  Currently embedded quotes don't work
  Currently field names are limited to proper SQL

**/

Name
  = Key / string

Key
  = [a-zA-Z_@#][0-9a-zA-Z_@#$]* { return text(); }

PositiveInteger
  = [0-9]+ { return parseInt(text(), 10); }

Number
  = ("+" / "-")? (([0-9]+ "."? [0-9]*) / ("." [0-9]+)) { return parseFloat(text()); }

Regex
 = "/" ("\\\/" / [^/])+ "/" { return text() }

UnquotedString
 = [^\{\}\[\]&:,'"]+ { return text() }

_
 = [ \t]+


/*
 * JSON Grammar
 * ============
 *
 * Based on the grammar from RFC 7159 [1].
 *
 * Note that JSON is also specified in ECMA-262 [2], ECMA-404 [3], and on the
 * JSON website [4] (somewhat informally). The RFC seems the most authoritative
 * source, which is confirmed e.g. by [5].
 *
 * [1] http://tools.ietf.org/html/rfc7159
 * [2] http://www.ecma-international.org/publications/standards/Ecma-262.htm
 * [3] http://www.ecma-international.org/publications/standards/Ecma-404.htm
 * [4] http://json.org/
 * [5] https://www.tbray.org/ongoing/When/201x/2014/03/05/RFC7159-JSON
 */

/* ----- 2. JSON Grammar ----- */

JSON_text
  = ws value:value ws { return value; }

begin_array     = ws "[" ws
begin_object    = ws "{" ws
end_array       = ws "]" ws
end_object      = ws "}" ws
name_separator  = ws ":" ws
value_separator = ws "," ws

ws "whitespace" = [ \t\n\r]*

/* ----- 3. Values ----- */

value
  = false
  / null
  / true
  / object
  / array
  / number
  / string

false = "false" { return false; }
null  = "null"  { return null;  }
true  = "true"  { return true;  }

/* ----- 4. Objects ----- */

object
  = begin_object
    members:(
      head:member
      tail:(value_separator m:member { return m; })*
      {
        var result = {}, i;

        result[head.name] = head.value;

        for (i = 0; i < tail.length; i++) {
          result[tail[i].name] = tail[i].value;
        }

        return result;
      }
    )?
    end_object
    { return members !== null ? members: {}; }

// We edit JSON spec here to allow for quoteless keys
member
  = name:Name name_separator value:value {
      return { name: name, value: value };
    }

name
  = string


/* ----- 5. Arrays ----- */

array
  = begin_array
    values:(
      head:value
      tail:(value_separator v:value { return v; })*
      { return [head].concat(tail); }
    )?
    end_array
    { return values !== null ? values : []; }

/* ----- 6. Numbers ----- */

number "number"
  = minus? int frac? exp? { return parseFloat(text()); }

decimal_point = "."
digit1_9      = [1-9]
e             = [eE]
exp           = e (minus / plus)? DIGIT+
frac          = decimal_point DIGIT+
int           = zero / (digit1_9 DIGIT*)
minus         = "-"
plus          = "+"
zero          = "0"

/* ----- 7. Strings ----- */

// Added single quote string
string "string"
  = double_quote_string / single_quote_string

double_quote_string
  = quotation_mark chars:char* quotation_mark { return chars.join("") }

single_quote_string
  = apostrophe chars:single_quote_char* apostrophe { return chars.join("") }

char
  = unescaped
  / escape
    sequence:(
        '"'
      / "\\"
      / "/"
      / "b" { return "\b"; }
      / "f" { return "\f"; }
      / "n" { return "\n"; }
      / "r" { return "\r"; }
      / "t" { return "\t"; }
      / "u" digits:$(HEXDIG HEXDIG HEXDIG HEXDIG) {
          return String.fromCharCode(parseInt(digits, 16));
        }
    )
    { return sequence; }

// Added (note that unescaped changes to reflect single quote)
single_quote_char
  = [^\0-\x1F\x27\x5C]
  / escape
    sequence:(
        "'"
      / "\\"
      / "/"
      / "b" { return "\b"; }
      / "f" { return "\f"; }
      / "n" { return "\n"; }
      / "r" { return "\r"; }
      / "t" { return "\t"; }
      / "u" digits:$(HEXDIG HEXDIG HEXDIG HEXDIG) {
          return String.fromCharCode(parseInt(digits, 16));
        }
    )
    { return sequence; }

escape         = "\\"
quotation_mark = '"'
apostrophe     = "'"
unescaped      = [^\0-\x1F\x22\x5C]

/* ----- Core ABNF Rules ----- */

/* See RFC 4234, Appendix B (http://tools.ietf.org/html/rfc4627). */
DIGIT  = [0-9]
HEXDIG = [0-9a-f]i
